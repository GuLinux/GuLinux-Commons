#!/bin/bash
# codec options: -s hd1080 -vcodec libx264

INPUT_FRAMERATE=1
OUTPUT_FILENAME="timelapse.mp4"
INPUT_MASK="IMG_%04d.JPG"
START_NUMBER=1
CODEC_OPT='-c:v libx264'
PRETEND=false


print_help() {
    cat >&2 <<EOF
Usage: $0 [options].
Options:
  -o|--output <filename> (default: $OUTPUT_FILENAME)
  -m|--input-mask <input-mask> (default: $INPUT_MASK)
  -s|--start-number <number> (default: $START_NUMBER)
  -f|--output-framerate <framerate> (default: $OUTPUT_FRAMERATE)
  -r|--input-framerate <framerate> (default: $INPUT_FRAMERATE)
  -z|--resize <resolution> (resolution can be either WIDTHxHEIGHT, or 4k/1080p/720p)
  -cf <color_format> use specific color format (default: yuvj444p, another common choice is yuv420p)
  -g|--glob       use glob as mask
  -crf <crf>
  -preset <preset>
  -tune <tune>
  --pretend     just prints the command line and exit
  --x265        Use x265 codec (default: x264)
EOF
    exit ${1:-1}
}

[ -z "$1" ] && print_help

VF=""

add_vf() {
    if [ -n "$VF" ]; then
        VF="$VF, $@"
    else
        VF="$@"
    fi
}

while [[ -n "$1" ]]; do
    case "$1" in
        -s|--start-number)
            START_NUMBER="$2"; shift
            ;;
        -m|--input-mask)
            INPUT_MASK="$2"; shift
            ;;
        -f|--output-framerate)
            OUTPUT_FRAMERATE_OPTS="-r $2"; shift
            ;;
        -o|--output)
            OUTPUT_FILENAME="$2"; shift
            ;;
        -r|--input-framerate)
            INPUT_FRAMERATE="$2"; shift
            ;;
        -z|--resize)
            if [ "$2" == "4k" ]; then
                res="3840x2160"
            elif [ "$2" == "1080p" ]; then
                res="1920x1080"
            elif [ "$2" == "720p" ]; then
                res="1280x720"
            else
                res="$2"
            fi
            shift
            width="$( cut -dx -f1 <<<"$res")"
            height="$( cut -dx -f2 <<<"$res")"
            add_vf "scale=$width:$height:force_original_aspect_ratio=decrease,pad=$width:$height:(ow-iw)/2:(oh-ih)/2"
            ;;
        -cf)
            add_vf "format=$2"; shift
            ;;
        -crf)
            CRF_OPTS="-crf $2"; shift
            ;;
        -preset)
            PRESET_OPTS="-preset $2"; shift
            ;;
        -tune)
            TUNE_OPTS="-tune $2"; shift
            ;;
        -g|--glob)
            GLOB_OPTS="-pattern_type glob"
            ;;
        --pretend)
            PRETEND=true
            ;;
        --x265)
            CODEC_OPT='-c:v libx265'
            ;;
        *)
            print_help
            ;;
    esac
    shift
done

[ -n "$VF" ] && VF_ARG="-vf \"$VF\""

command="ffmpeg -hide_banner -f image2 -start_number '$START_NUMBER' -r '$INPUT_FRAMERATE' $GLOB_OPTS -i '$INPUT_MASK' $OUTPUT_FRAMERATE_OPTS $VF_ARG $PRESET_OPTS $TUNE_OPTS $CODEC_OPT $CRF_OPTS '$OUTPUT_FILENAME'"
echo "Running FFMPEG command:"
echo "$command"
if [ "$PRETEND" == "true" ]; then
    exit 0
fi
eval "$command"


